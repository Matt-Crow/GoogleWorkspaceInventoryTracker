/**
 * This module is responsible for providing details on the emails this 
 * application sends, without binding it to implementation details
 */



class Email {
    constructor(to=[], subject="", bodyHtml=""){
        if(!Array.isArray(to)){
            to = [to];
        }
        this.to = to;
        this.subject = subject;
        this.bodyHtml = bodyHtml;
    }
}


class EmailService {
    /**
     * @param {UserService} userService used to get lists of users who want
     *  each email type.
     * @param {(email)=>any} sendEmail sends emails
     * @param {Settings} settings contains email settings
     * @param {()=>null} regenerateInventoryForm regenerates the inventory
     *  form if it is stale.
     */
    constructor(userService, sendEmail, settings, regenerateInventoryForm){
        this._users = userService;
        this._sendEmail = sendEmail;
        this._settings = settings;
        this._regenerateInventoryForm = regenerateInventoryForm;
    }

    sendInventoryForm(){
        if(this._settings.isInventoryFormStale()){
            this._regenerateInventoryForm();
        }

        const to = this._users.getInventoryFormEmails();
        if(to.length === 0){
            return;
        }

        const newProdUrl = this._settings.getNewItemFormUrl();
        const removeItemUrl = this._settings.getRemoveItemFormUrl();
        const inventoryUrl = this._settings.getInventoryFormUrl();
        const sheetUrl = this._settings.getWorkbookUrl();
        const userUrl = this._settings.getUserFormUrl();
        const lines = [
            "This email was generated by the Google Workspace Inventory Tracker.",
            `This form adds a new item to your inventory: ${newProdUrl}.`,
            `This form removes an item from your inventory: ${removeItemUrl}`,
            `This form updates the items already recorded in your inventory: ${inventoryUrl}`,
            `You can view your inventory here: ${sheetUrl}`,
            `You can change your notification preferences here: ${userUrl}`
        ];
        const email = new Email(
            to,
            "It's time to update our inventory!",
            lines.map(line => `<p>${line}</p>`).join("\n")
        );

        this._sendEmail(email);
    }

    sendInventoryFormReply(){
        const to = this._users.where(u => u.wantsLogReply);
        if(to.length === 0){
            return;
        }

        const sheetUrl = this._settings.getWorkbookUrl();
        const userUrl = this._settings.getUserFormUrl();
        const lines = [
            "This email was generated by the Google Workspace Inventory Tracker.",
            "Your inventory has been successfully updated!",
            `You can see the result of these changes here: ${sheetUrl}.`,
            `You can opt out of receiving this email here: ${userUrl}`
        ];
        const email = new Email(
            to,
            "Our inventory has been successfully updated!",
            lines.map(line => `<p>${line}</p>`).join("\n")
        );

        this._sendEmail(email);
    }

    /**
     * Sends an email to all restockers, notifying them that the given items
     * need to be restocked.
     * 
     * @param {Item[]} items which need to be restocked 
     */
    sendRestockReminder(items){
        const to = this._users.where(u => u.wantsReport);
        if(to.length === 0){
            return;
        }
        
        const sheetUrl = this._settings.getWorkbookUrl();
        const userUrl = this._settings.getUserFormUrl();
        let lines = [
            "This email was generated by the Google Workspace Inventory Tracker."
        ];

        if(items.length === 0){
            lines.push("No items in your inventory are running low on stock, yay!");
            lines = lines.map(line => `<p>${line}</p>`);
        } else {
            lines.push("The following items are running low on stock:");
            lines = lines.map(line => `<p>${line}</p>`);
            const itemLines = items.map(item => `${item.name} x ${item.quantity} (minimum is ${item.minimum})`);
            lines.push("<ul>");
            itemLines.map(line=>`<li>${line}</li>`).forEach(line=>lines.push(line));
            lines.push("</ul>");
        }

        lines.push(`<p>You view your inventory here: ${sheetUrl}</p>`);
        lines.push(`<p>You can opt out of receiving this email here: ${userUrl}</p>`);

        const email = new Email(
            to,
            "Restock Reminder",
            lines.join("\n")
        );

        this._sendEmail(email);
    }
}

function testEmailModule(){
    const sentEmails = new Map();
    const users = [
        new User("foo.bar@gmail.com", true, false),
        new User("baz.qux@gmail.com", false, false)
    ];
    const repo = makeInMemoryUserRepository(users);
    const userService = new UserService(repo);
    let settings = {};
    const emailRecorder = (email)=>{
        email.to.forEach(addr=>{
            if(!sentEmails.has(addr)){
                sentEmails.set(addr, []);
            }
            sentEmails.get(addr).push(email);
        });
    };
    const settingService = new Settings(
        k => settings[k],
        (k, v)=> {
            if(!settings[k]){
                settings[k] = new Setting(k, v);
            } else {
                settings[k].value = v;
            }
        },
        setting => settings[setting.name] = setting
    );
    settingService.populateDefaults();
    const emailService = new EmailService(
        userService,
        emailRecorder,
        settingService,
        ()=>settingService.setInventoryFormStale(false)
    );
    emailService.sendInventoryForm();

    assert(sentEmails.has("foo.bar@gmail.com"));
    assert(1 === sentEmails.get("foo.bar@gmail.com").length);
    assert(!sentEmails.has("baz.qux@gmail.com"));
}